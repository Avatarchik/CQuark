
字段
public static readonly float kEpsilon;
public float x;
public float y;
public float z;

静态属性
public static UnityEngine.Vector3 zero{get;}
public static UnityEngine.Vector3 one{get;}
public static UnityEngine.Vector3 forward{get;}
public static UnityEngine.Vector3 back{get;}
public static UnityEngine.Vector3 up{get;}
public static UnityEngine.Vector3 down{get;}
public static UnityEngine.Vector3 left{get;}
public static UnityEngine.Vector3 right{get;}
[Obsolete]public static UnityEngine.Vector3 fwd{get;}

实例属性
public UnityEngine.Vector3 normalized{get;}
public float magnitude{get;}
public float sqrMagnitude{get;}

构造函数
public UnityEngine.Vector3(System.Single x,System.Single y,System.Single z)
public UnityEngine.Vector3(System.Single x,System.Single y)

静态方法
public static UnityEngine.Vector3 Slerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t)
public static UnityEngine.Vector3 SlerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t)
public static void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent)
public static void OrthoNormalize(ref UnityEngine.Vector3 normal, ref UnityEngine.Vector3 tangent, ref UnityEngine.Vector3 binormal)
public static UnityEngine.Vector3 RotateTowards(UnityEngine.Vector3 current, UnityEngine.Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta)
[Obsolete]public static UnityEngine.Vector3 Exclude(UnityEngine.Vector3 excludeThis, UnityEngine.Vector3 fromThat)
public static UnityEngine.Vector3 Lerp(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t)
public static UnityEngine.Vector3 LerpUnclamped(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t)
public static UnityEngine.Vector3 MoveTowards(UnityEngine.Vector3 current, UnityEngine.Vector3 target, float maxDistanceDelta)
public static UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime, float maxSpeed)
public static UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime)
public static UnityEngine.Vector3 SmoothDamp(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 currentVelocity, float smoothTime, float maxSpeed, float deltaTime)
public static UnityEngine.Vector3 Scale(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
public static UnityEngine.Vector3 Cross(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
public static UnityEngine.Vector3 Reflect(UnityEngine.Vector3 inDirection, UnityEngine.Vector3 inNormal)
public static UnityEngine.Vector3 Normalize(UnityEngine.Vector3 value)
public static float Dot(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
public static UnityEngine.Vector3 Project(UnityEngine.Vector3 vector, UnityEngine.Vector3 onNormal)
public static UnityEngine.Vector3 ProjectOnPlane(UnityEngine.Vector3 vector, UnityEngine.Vector3 planeNormal)
public static float Angle(UnityEngine.Vector3 from, UnityEngine.Vector3 to)
public static float Distance(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
public static UnityEngine.Vector3 ClampMagnitude(UnityEngine.Vector3 vector, float maxLength)
public static float Magnitude(UnityEngine.Vector3 a)
public static float SqrMagnitude(UnityEngine.Vector3 a)
public static UnityEngine.Vector3 Min(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
public static UnityEngine.Vector3 Max(UnityEngine.Vector3 lhs, UnityEngine.Vector3 rhs)
[Obsolete]public static float AngleBetween(UnityEngine.Vector3 from, UnityEngine.Vector3 to)

成员方法
public void Set(float new_x, float new_y, float new_z)
public void Scale(UnityEngine.Vector3 scale)
public int GetHashCode()
public bool Equals(object other)
public void Normalize()
public string ToString()
public string ToString(string format)
public System.Type GetType()

索引
IndexGet System.Single [System.Int32 index]
IndexSet [System.Int32 index] = System.Single value

运算符
public static UnityEngine.Vector3 op_Addition(UnityEngine.Vector3 a,UnityEngine.Vector3 b)
public static UnityEngine.Vector3 op_Subtraction(UnityEngine.Vector3 a,UnityEngine.Vector3 b)
public static UnityEngine.Vector3 op_UnaryNegation(UnityEngine.Vector3 a)
public static UnityEngine.Vector3 op_Multiply(UnityEngine.Vector3 a,System.Single d)
public static UnityEngine.Vector3 op_Multiply(System.Single d,UnityEngine.Vector3 a)
public static UnityEngine.Vector3 op_Division(UnityEngine.Vector3 a,System.Single d)
public static System.Boolean op_Equality(UnityEngine.Vector3 lhs,UnityEngine.Vector3 rhs)
public static System.Boolean op_Inequality(UnityEngine.Vector3 lhs,UnityEngine.Vector3 rhs)
